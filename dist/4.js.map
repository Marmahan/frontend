{"version":3,"sources":["webpack:///./src/home/comment.js","webpack:///./src/home/allcomments.js","webpack:///./src/home/allposts.js","webpack:///./src/home/allpostsuser.js","webpack:///./src/home/root.component.js","webpack:///./src/home/home.app.js","webpack:///./node_modules/react-confirm-alert/lib/index.js"],"names":["Comment","state","email","commentbody","commentsubmitted","handlechange","e","_this$setState","_this","setState","target","id","value","handlesubmit","preventDefault","axios","post","postID","props","postid","then","response","data","error","console","log","Materialize","toast","render","this","react_default","a","createElement","className","onSubmit","type","required","aria-required","onChange","htmlFor","React","Component","Allcomments","comments","componentDidMount","_this2","get","res","clist","length","map","comment","style","padding","key","_id","fontSize","marginLeft","time","replace","substring","Allposts","posts","thereIsApost","setpost","backhome","_this3","plist","cursor","onClick","title","date","writer","body","home_comment","allcomments","Allpostsuser","hover","editapost","edited","postdeleted","getCookie","name","parts","document","cookie","split","pop","shift","location","reload","hoverOn","hoverOff","handleedit","headers","Content-Type","Authorization","put","toString","setTimeout","editpost","deletepost","confirmAlert","message","buttons","label","delete","defaultValue","onMouseEnter","onMouseLeave","Home","islogged","setemail","v","concat","Date","setTime","getTime","min","window","toGMTString","allpostsuser","allposts","__webpack_require__","d","__webpack_exports__","bootstrap","mount","unmount","reactLifecycles","singleSpaReact","ReactDOM","rootComponent","domElementGetter","getElementById","Object","defineProperty","exports","default","undefined","_class","_temp2","_createClass","defineProperties","i","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","prototype","properties","classList","add","svgNS","feGaussianBlur","createElementNS","setAttribute","filter","appendChild","svgElem","createSVGBlurReconfirm","divTarget","_reactDom","_react2","ReactConfirmAlert","children","createElementReconfirm","_react","_interopRequireDefault","_propTypes2","obj","__esModule","_possibleConstructorReturn","self","call","ReferenceError","_Component","_ref","_temp","instance","TypeError","_classCallCheck","_len","arguments","args","Array","_key","__proto__","getPrototypeOf","apply","handleClickButton","button","close","handleClickOverlay","overlay","svg","remove","unmountComponentAtNode","parentNode","removeChild","keyboardClose","event","keyCode","addEventListener","componentWillUnmount","removeEventListener","willUnmount","renderCustomUI","_this$props","customUI","onClose","subClass","superClass","create","constructor","setPrototypeOf","_inherits","_props","childrenElement","ref","dom","propTypes","string","array","isRequired","func","defaultProps"],"mappings":"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","file":"4.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport axios from 'axios';  //to make the post request\r\n\r\n// Show a form so users could make comments\r\n\r\nclass Comment extends React.Component{\r\n\r\n    state={\r\n        email:'',\r\n        commentbody:'',\r\n        commentsubmitted:''\r\n      }\r\n      \r\n handlechange =(e)=>{\r\n     this.setState({\r\n         [e.target.id]:e.target.value\r\n     })\r\n }\r\n\r\n // called when submit button is pressed\r\n handlesubmit =(e)=>{\r\n     e.preventDefault();\r\n     //console.log(this.state)\r\n     //call the comments microservice\r\n     axios.post('http://localhost:1116/newcomment',{\r\n        postID:this.props.postid,\r\n        email:this.state.email,\r\n        commentbody:this.state.commentbody\r\n      }).then((response)=>{\r\n        if(response.data==1){\r\n          this.setState({commentsubmitted:true})\r\n        }\r\n        else{                       //the response has errors\r\n          this.setState({\r\n            error:response.data     \r\n          })\r\n          console.log(this.state.error);\r\n          {\r\n            this.state.error ? (  //show the response error\r\n              Materialize.toast(this.state.error, 3000 , 'red rounded'),\r\n              this.setState({     //clear the error\r\n                error:''\r\n              })\r\n            ) : null\r\n          }\r\n        }\r\n      })\r\n }\r\n\r\nrender() {\r\n    return (\r\n        this.state.commentsubmitted ? (//if comment is submitted then show this comment\r\n            <div className=\"card\">\r\n                <div className=\"card blue-grey darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\">{this.state.email}</span>\r\n                        <p>{this.state.commentbody}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        ) : (               //comment is not submitted yet, then show the form to submit a comment\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form onSubmit={this.handlesubmit} className=\"col s8\">\r\n                        <div className=\"input-field\">\r\n                            <div className=\"left-align\">\r\n                                <input id=\"email\" type=\"email\" className=\"validate\" required={true} aria-required=\"true\" onChange={this.handlechange}/>\r\n                                <label htmlFor=\"email\">Email</label>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"input-field\">\r\n                            <textarea id=\"commentbody\" className=\"materialize-textarea\" required={true} onChange={this.handlechange}></textarea>\r\n                            <label htmlFor=\"commentbody\">Textarea</label>\r\n                        </div>\r\n\r\n                        <div className=\"left-align\">  {/* This div wrapper is necessary for the left alignment */}\r\n                            <input type=\"submit\"  value=\"Send\" className=\"btn\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    );\r\n}\r\n}\r\n\r\nexport default Comment;","import React from \"react\";\r\nimport axios from 'axios';  //to make the post request\r\n\r\n/* Show all the comments of a specific post */\r\n\r\nclass Allcomments extends React.Component{\r\n  \r\n  state = {\r\n      comments: [],\r\n  } \r\n\r\n  //Bring all the posts from the posts service and store them in the state\r\n  componentDidMount(){\r\n    axios.get('http://localhost:1116/comments/'+this.props.postid)\r\n    .then(res =>{\r\n        this.setState({\r\n            comments: res.data\r\n        })\r\n    })\r\n  }  \r\n\r\nrender(){\r\n    /* Bring all the comments from the data base and stor them in clist*/\r\n    const {comments} = this.state;\r\n    const clist = comments.length ? (\r\n        comments.map(comment =>{\r\n            return (    //store the comments in clist\r\n                <div >\r\n                    <div className=\"card col s8 z-depth-4\" style={{padding:'0px'}} key={comment._id}>\r\n                        <div className=\"card blue-grey darken-4 darken-1\">\r\n                            <div className=\"card-content white-text\">\r\n                                <span className=\"card-title\">{comment.email}</span>\r\n                                <span style={{fontSize:'11px', marginLeft:'10px'}}>{comment.time.replace('T',' ').substring(0, 24-5)}</span>\r\n                                <p>{comment.commentbody}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col s4\"></div>\r\n                </div>\r\n            )\r\n        })\r\n    ):( //No comments are found so clist is empty\r\n        <div className=\"center\">\r\n           \r\n        </div>\r\n    )\r\n    return(\r\n        //<div className=\"container\">\r\n            <div className=\"container\">{clist}</div> \r\n        //</div>\r\n            \r\n    )\r\n  }\r\n}\r\n\r\nexport default Allcomments;","import React from \"react\";\r\nimport axios from 'axios';  //to make the post request\r\nimport Comment from \"./comment\";\r\nimport Allcomments from './allcomments';\r\n\r\n/* Bring all posts from the DB */\r\n\r\nclass Allposts extends React.Component{\r\n  \r\n  state = {\r\n      posts: [],\r\n      thereIsApost:false, //if it is true then the app will show one post, \r\n      //if it is false then the app will show all the posts \r\n      post:'',\r\n      postid:''\r\n  } \r\n\r\n  //Bring all the posts from the posts service and store them in the state\r\n  componentDidMount(){\r\n    axios.get('http://localhost:1115/posts')\r\n    .then(res =>{\r\n        this.setState({\r\n            posts: res.data\r\n        })\r\n    })\r\n  }  \r\n\r\n  //Bring the post that was clicked and store it in the state\r\nsetpost =(e)=>{\r\n    this.setState({\r\n        postid:e\r\n    })\r\n    //console.log(e)\r\n    this.setState({\r\n        thereIsApost : true\r\n    })\r\n    axios.get('http://localhost:1115/post/'+e)\r\n    .then(res =>{\r\n        //console.log(res.data[0])\r\n        this.setState({\r\n            post: res.data[0],\r\n            postid:res.data[0]._id\r\n        })\r\n    })\r\n\r\n}\r\n//clears the state that there is no post so all posts are shown\r\nbackhome =()=>{\r\n    this.setState({\r\n        thereIsApost:false\r\n    })\r\n}\r\n\r\nrender(){\r\n    /* Bring all the posts from the data base and stor them in plist*/\r\n    const {posts} = this.state;\r\n    const plist = posts.length ? (\r\n        posts.map(post =>{\r\n            return (    //store the posts in plist\r\n                <div className=\"card\" key={post._id}>\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                            <span className=\"card-title\"><a  style={{cursor: 'pointer'}} onClick={() => {this.setpost(post._id)}}>{post.title}</a></span>\r\n                            <span style={{fontSize:'11px', marginLeft:'10px'}}>{post.date.replace('T',' ').substring(0, 24-5)}</span>\r\n                            <span className=\"right\">{post.writer}</span>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        })\r\n    ):( //No posts are found so plist is empty\r\n        <div className=\"center\">\r\n              <div className=\"row\">\r\n                <div className=\"col s12 m12\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\"></span>\r\n                        <p>No posts yet!!</p>\r\n                        </div>\r\n                        <div className=\"card-action\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    return(\r\n            this.state.thereIsApost ? (   //show one post\r\n                <div>\r\n                    <div className=\"card\">\r\n                        <div className=\"card blue-grey darken-1\">\r\n                            <div className=\"card-content white-text\">\r\n                                <span className=\"card-title\">{this.state.post.title}</span>\r\n                                <span style={{fontSize:'11px', marginLeft:'10px'}}>{this.state.post.date}</span>\r\n                                <span className=\"right\">{this.state.post.writer}</span>\r\n                                <p>{this.state.post.body}</p>\r\n                            </div>\r\n                        </div>    \r\n                    </div>\r\n\r\n                    {/* to type a comment */}\r\n                    < Comment postid={this.state.post._id}/>\r\n\r\n                    {/* to show all comments*/}\r\n                    < Allcomments postid={this.state.postid}/>\r\n\r\n                    {/* Go back home and show all posts*/}\r\n                    <a className=\"btn-floating btn-large waves-effect waves-light red\" onClick={this.backhome}><i className=\"material-icons\">home</i></a>\r\n               \r\n                </div>\r\n            ) : (   //show all posts\r\n                <div>{plist}</div>\r\n            )\r\n    )\r\n  }\r\n}\r\n\r\nexport default Allposts;","import React from \"react\";\r\nimport axios from 'axios';  //to make the post request\r\nimport Comment from \"./comment\";\r\nimport Allcomments from './allcomments';\r\nimport { confirmAlert } from 'react-confirm-alert'; // for the alert\r\n\r\n//Bring all posts from the DB for a specific user\r\n//also have edit one post, delete one post\r\n\r\nclass Allpostsuser extends React.Component{\r\n  \r\n  state = {\r\n      posts: [],\r\n      thereIsApost:false, //if it is true then the app will show one post, \r\n      //if it is false then the app will show all the posts \r\n      post:'',\r\n      postid:'',\r\n      hover:false,\r\n      editapost:false,\r\n      title:'',\r\n      body:'',\r\n      edited:false,//post is not in edit mode, so don't show anything related to edit\r\n      postdeleted:false //post is not in the delete mode, so don't show anything related to delete. \r\n  } \r\n\r\n  //Bring all the posts from the posts service and store them in the state\r\n  componentDidMount(){\r\n    var headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" +  this.getCookie('jwt')\r\n    }\r\n\r\n    axios.get('http://localhost:1115/allpostsbyuser', {\"headers\" : headers})\r\n    .then(res =>{\r\n        this.setState({\r\n            posts: res.data\r\n        })\r\n    })\r\n  }  \r\n\r\n  //bring value of a cookie based on its name\r\n  getCookie = (name)=> {\r\n    var value = \"; \" + document.cookie;\r\n    var parts = value.split(\"; \" + name + \"=\");\r\n    if (parts.length == 2) return parts.pop().split(\";\").shift();\r\n  }\r\n\r\n  \r\n  //Bring the post that was clicked and store it in the state\r\nsetpost =(e)=>{\r\n    this.setState({\r\n        postid:e\r\n    })\r\n    //console.log(e)\r\n    this.setState({\r\n        thereIsApost : true\r\n    })\r\n    //get a post\r\n    axios.get('http://localhost:1115/post/'+e)\r\n    .then(res =>{\r\n        //console.log(res.data[0])\r\n        this.setState({\r\n            post: res.data[0],\r\n            postid:res.data[0]._id,\r\n            title: res.data[0].title,\r\n            body:res.data[0].body\r\n        })\r\n    })\r\n\r\n}\r\n//not sure if refresh the page sets the state back to default\r\nbackhome =()=>{\r\n    //refresh the page\r\n    location.reload();\r\n\r\n}\r\n\r\n//set the hover state true\r\n//when hover state is true, delete and update icons will be displayed\r\nhoverOn =()=>{\r\n    this.setState({ hover: true });\r\n  }\r\n\r\n  //set the hover state false\r\n  hoverOff=()=>{ \r\n    this.setState({ hover: false });    \r\n  }\r\n\r\n  //actually edit the post\r\n  handleedit=()=>{\r\n    \r\n    var headers = {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" +  this.getCookie('jwt')\r\n    } \r\n    //the state has the id of the post\r\n    axios.put('http://localhost:1115/editpost/'+this.state.postid.toString(),\r\n    {\r\n        title:this.state.title,\r\n        body:this.state.body\r\n    },{\"headers\" : headers}\r\n    )\r\n    .then(res =>{\r\n        this.setState({\r\n            edited:true //so show a message of successful editing\r\n        })\r\n        //Refresh the page after two seconds of showing the successful message\r\n        setTimeout(()=>{\r\n            location.reload();\r\n          },2000)\r\n    })\r\n  }\r\n\r\n  //set the state according to the input of the user\r\n  handlechange =(e)=>{\r\n    this.setState({\r\n        [e.target.id]:e.target.value\r\n    })\r\n  }\r\n\r\n  //edit a post, basically show the edit form\r\n  editpost =()=>{\r\n      this.setState({\r\n          //when this is true, it means show the edit form\r\n          editapost:true\r\n      });\r\n\r\n  }\r\n\r\n  //delete a post\r\n  deletepost=()=>{\r\n        confirmAlert({\r\n          message: 'Are you sure to delete this post?',\r\n          buttons: [\r\n            {\r\n              label: 'Yes',\r\n              //if yes\r\n              onClick: () => {\r\n                //header for the jwt access rights\r\n                var headers = {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer \" +  this.getCookie('jwt')\r\n                } \r\n                //the state has the id of the post\r\n                axios.delete('http://localhost:1115/deleteapost/'+this.state.postid.toString(), {\"headers\" : headers})\r\n                .then(res =>{\r\n                    console.log('post has been deleted');\r\n                    //show a confirmation message and refresh the screen\r\n                    Materialize.toast(\"Post has been deleted\", 1000 , 'red rounded')\r\n                    setTimeout(()=>{\r\n                        location.reload();\r\n                      },1000)\r\n                })\r\n              }\r\n            },\r\n            {\r\n              //don't do anything\r\n              label: 'No'\r\n            }\r\n          ]\r\n        })\r\n  }\r\n\r\nrender(){\r\n    /* Bring all the posts from the data base and stor them in plist */\r\n    const {posts} = this.state;\r\n    const plist = posts.length ? ( //if there are posts, bring them to the plist\r\n        posts.map(post =>{\r\n            return (    //store the posts in plist\r\n                <div>\r\n                    <div className=\"card\" key={post._id}>\r\n                        <div className=\"card blue-grey darken-1\">\r\n                            <div className=\"card-content white-text\" >\r\n                                <span className=\"card-title\"><a  style={{cursor: 'pointer'}} onClick={() => {this.setpost(post._id)}}>{post.title}</a></span>\r\n                                <span style={{fontSize:'11px', marginLeft:'10px'}}>{post.date.replace('T',' ').substring(0, 24-5)}</span>\r\n                                <span className=\"right\">{post.writer}</span>\r\n                                <p>{post.body}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        })\r\n    ):( //No posts are found so plist is empty\r\n        <div className=\"center\">\r\n              <div className=\"row\">\r\n                <div className=\"col s12 m12\">\r\n                    <div className=\"card blue-grey darken-1\">\r\n                        <div className=\"card-content white-text\">\r\n                        <span className=\"card-title\"></span>\r\n                        <p>No posts yet!!</p>\r\n                        </div>\r\n                        <div className=\"card-action\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    return(\r\n        //if editapost is true then either show a post was edited successfuly, \r\n        //or show the edit form\r\n        this.state.editapost ? (\r\n            this.state.edited? ( //show a post was edited successfuly\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"card-panel center\">\r\n                            <h5 className=\"center green-text\">Post Edited!</h5>\r\n                            <h6 className=\"center green-text\">:)</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>             \r\n\r\n            ):(//show the edit form\r\n                <div className='container'>\r\n                    <div className=\"row\">\r\n                        <div className=\"card-panel center\">\r\n                            <i className=\"medium material-icons\">edit</i>\r\n                            <h5 className='center black-text'>Edit The Post</h5> \r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"card-panel center\">\r\n                            <form onSubmit={this.handlesubmit}>\r\n                            <div className=\"input-field\">\r\n                                <input type=\"text\" name=\"title\" id=\"title\" defaultValue={this.state.post.title} onChange={this.handlechange}/>\r\n                                <label htmlFor=\"title\" className=\"active\">Title</label>\r\n                            </div>\r\n                            {/* active classname so the text doesn't overlap the value for both the title and the body */}\r\n                            <div className=\"input-field\">\r\n                                <textarea  name=\"body\" id=\"body\" className=\"materialize-textarea\" defaultValue={this.state.post.body} onChange={this.handlechange}/>\r\n                                <label htmlFor=\"body\" className=\"active\">Post Content</label>\r\n                            </div>\r\n\r\n                            <div className=\"left-align\">  {/* This div wrapper is necessary for the left alignment */}\r\n                                <input type=\"button\" onClick={this.handleedit} value=\"Edit\" className=\"btn\"/>\r\n                            </div>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        ):( //editpost is false so go normally. Either show one post, or all posts\r\n            this.state.thereIsApost ? (   //show one post\r\n\r\n                <div>\r\n                    <div className=\"card\">\r\n                        <div className=\"card blue-grey darken-1\">\r\n                                {/* Show the options for the user if they hover over a text */}\r\n                            <div className=\"card-content white-text\" \r\n                            onMouseEnter={this.hoverOn} onMouseLeave={this.hoverOff}>\r\n                                <span className=\"card-title\">{this.state.post.title}</span>\r\n                                <span style={{fontSize:'11px', marginLeft:'10px'}}>{this.state.post.date}</span>\r\n                                <span className=\"right\">{this.state.post.writer}</span>\r\n                                <p>{this.state.post.body}</p>\r\n                                <br />\r\n                                {\r\n                                  //if hover is true, then show delete and update icons  \r\n                                  this.state.hover? (\r\n                                        <div>\r\n                                            <i className=\" material-icons useroptioncolor\" onClick={this.deletepost}>delete</i>\r\n                                            <i className=\" material-icons useroptioncolor\" onClick={this.editpost}>mode_edit</i>\r\n                                        </div>\r\n                                    ):(\r\n                                        <div>\r\n                                            \r\n                                        </div>\r\n                                    )\r\n                                }\r\n\r\n                            </div>\r\n                        </div>    \r\n                    </div>\r\n\r\n                    {/* to type a comment */}\r\n                    < Comment postid={this.state.post._id}/>\r\n\r\n                    {/* to show all comments*/}\r\n                    < Allcomments postid={this.state.postid}/>\r\n\r\n                    {/* Go back home and show all posts*/}\r\n                    <a className=\"btn-floating btn-large waves-effect waves-light red\" onClick={this.backhome}><i className=\"material-icons\">home</i></a>\r\n               \r\n                </div>\r\n            ) : (   // all the previous conditions are not met so show all posts\r\n                <div>{plist}</div>\r\n            )\r\n        )\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Allpostsuser;","import React from \"react\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport {\r\n  BrowserRouter,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Allposts from './allposts';\r\nimport Allpostsuser from './allpostsuser';\r\n\r\n\r\n\r\nclass Home extends React.Component{\r\n  state={\r\n    email: document.cookie || '',\r\n    islogged:''\r\n  }\r\n\r\n\r\n\r\n  setemail =(v)=>{\r\n    this.setState({\r\n      email: this.state.email.concat(v)\r\n    },() => {\r\n      var date = new Date();\r\n      var min=1;\r\n      date.setTime(date.getTime() + (min * 60 * 1000)); //1 min\r\n      window.document.cookie = 'email' + \"=\" + this.state.email + \"; expires=\" + date.toGMTString();\r\n      //document.cookie=this.state.email;\r\n    });\r\n  }\r\n\r\n  getCookie = (name)=> {\r\n    var value = \"; \" + document.cookie;\r\n    var parts = value.split(\"; \" + name + \"=\");\r\n    if (parts.length == 2) return parts.pop().split(\";\").shift();\r\n  }\r\n\r\n  render(){\r\n\r\n        return(\r\n              this.state.email ? ( // is user logged in?\r\n                  <div className=\"container\">\r\n                    <br />\r\n                    <div className=\"welcomemsgparent\">\r\n                      <h4 className=\"welcomemsg\">Welcome {this.getCookie('email')}</h4>\r\n                      <div className=\"fade_rule\"></div>  \r\n                    </div>\r\n                    <Allpostsuser />{/* This brings all posts of the logged in user */}\r\n                  </div>\r\n                ):\r\n                ( //user is not logged in\r\n      \r\n                  <div className=\"container\">\r\n                    <Allposts />\r\n                  </div>\r\n                  \r\n                )\r\n        )\r\n\r\n  }\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// home.app.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport singleSpaReact from 'single-spa-react';\r\nimport Home from './root.component.js';\r\n\r\n\r\n/* Implement several SIngle-SPA functions */\r\nconst reactLifecycles = singleSpaReact({\r\n  React,\r\n  ReactDOM,\r\n  rootComponent: Home,\r\n  domElementGetter,\r\n})\r\n\r\nexport const bootstrap = [\r\n  reactLifecycles.bootstrap,\r\n];\r\n\r\nexport const mount = [\r\n  reactLifecycles.mount,\r\n];\r\n\r\nexport const unmount = [\r\n  reactLifecycles.unmount,\r\n];\r\n\r\n// specify the location to mount the app\r\nfunction domElementGetter() {\r\n  return document.getElementById(\"home\")\r\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _class, _temp2;\n\nexports.confirmAlert = confirmAlert;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ReactConfirmAlert = (_temp2 = _class = function (_Component) {\n  _inherits(ReactConfirmAlert, _Component);\n\n  function ReactConfirmAlert() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ReactConfirmAlert);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactConfirmAlert.__proto__ || Object.getPrototypeOf(ReactConfirmAlert)).call.apply(_ref, [this].concat(args))), _this), _this.handleClickButton = function (button) {\n      if (button.onClick) button.onClick();\n      _this.close();\n    }, _this.handleClickOverlay = function (e) {\n      if (e.target === _this.overlay) _this.close();\n    }, _this.close = function () {\n      removeBodyClass();\n      removeElementReconfirm();\n      removeSVGBlurReconfirm();\n    }, _this.keyboardClose = function (event) {\n      if (event.keyCode === 27) {\n        _this.close();\n      }\n    }, _this.componentDidMount = function () {\n      document.addEventListener('keydown', _this.keyboardClose, false);\n    }, _this.componentWillUnmount = function () {\n      document.removeEventListener('keydown', _this.keyboardClose, false);\n      _this.props.willUnmount();\n    }, _this.renderCustomUI = function () {\n      var _this$props = _this.props,\n          title = _this$props.title,\n          message = _this$props.message,\n          customUI = _this$props.customUI;\n\n      var dataCustomUI = {\n        title: title,\n        message: message,\n        onClose: _this.close\n      };\n\n      return customUI(dataCustomUI);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ReactConfirmAlert, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          title = _props.title,\n          message = _props.message,\n          buttons = _props.buttons,\n          childrenElement = _props.childrenElement,\n          customUI = _props.customUI;\n\n\n      return _react2.default.createElement(\n        'div',\n        {\n          className: 'react-confirm-alert-overlay',\n          ref: function ref(dom) {\n            return _this2.overlay = dom;\n          },\n          onClick: this.handleClickOverlay\n        },\n        _react2.default.createElement(\n          'div',\n          { className: 'react-confirm-alert' },\n          customUI ? this.renderCustomUI() : _react2.default.createElement(\n            'div',\n            { className: 'react-confirm-alert-body' },\n            title && _react2.default.createElement(\n              'h1',\n              null,\n              title\n            ),\n            message,\n            childrenElement(),\n            _react2.default.createElement(\n              'div',\n              { className: 'react-confirm-alert-button-group' },\n              buttons.map(function (button, i) {\n                return _react2.default.createElement(\n                  'button',\n                  {\n                    key: i,\n                    onClick: function onClick() {\n                      return _this2.handleClickButton(button);\n                    }\n                  },\n                  button.label\n                );\n              })\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return ReactConfirmAlert;\n}(_react.Component), _class.propTypes = {\n  title: _propTypes2.default.string,\n  message: _propTypes2.default.string,\n  buttons: _propTypes2.default.array.isRequired,\n  childrenElement: _propTypes2.default.func,\n  customUI: _propTypes2.default.func,\n  willUnmount: _propTypes2.default.func\n}, _class.defaultProps = {\n  buttons: [{\n    label: 'Cancel',\n    onClick: function onClick() {\n      return null;\n    }\n  }, {\n    label: 'Confirm',\n    onClick: function onClick() {\n      return null;\n    }\n  }],\n  childrenElement: function childrenElement() {\n    return null;\n  },\n  willUnmount: function willUnmount() {\n    return null;\n  }\n}, _temp2);\nexports.default = ReactConfirmAlert;\n\n\nfunction createSVGBlurReconfirm() {\n  // If has svg ignore to create the svg\n  var svg = document.getElementById('react-confirm-alert-firm-svg');\n  if (svg) return;\n  var svgNS = 'http://www.w3.org/2000/svg';\n  var feGaussianBlur = document.createElementNS(svgNS, 'feGaussianBlur');\n  feGaussianBlur.setAttribute('stdDeviation', '0.7');\n\n  var filter = document.createElementNS(svgNS, 'filter');\n  filter.setAttribute('id', 'gaussian-blur');\n  filter.appendChild(feGaussianBlur);\n\n  var svgElem = document.createElementNS(svgNS, 'svg');\n  svgElem.setAttribute('id', 'react-confirm-alert-firm-svg');\n  svgElem.setAttribute('class', 'react-confirm-alert-svg');\n  svgElem.appendChild(filter);\n\n  document.body.appendChild(svgElem);\n}\n\nfunction removeSVGBlurReconfirm() {\n  var svg = document.getElementById('react-confirm-alert-firm-svg');\n  svg.parentNode.removeChild(svg);\n  document.body.children[0].classList.remove('react-confirm-alert-blur');\n}\n\nfunction createElementReconfirm(properties) {\n  var divTarget = document.getElementById('react-confirm-alert');\n  if (divTarget) {\n    // Rerender - the mounted ReactConfirmAlert\n    (0, _reactDom.render)(_react2.default.createElement(ReactConfirmAlert, properties), divTarget);\n  } else {\n    // Mount the ReactConfirmAlert component\n    document.body.children[0].classList.add('react-confirm-alert-blur');\n    divTarget = document.createElement('div');\n    divTarget.id = 'react-confirm-alert';\n    document.body.appendChild(divTarget);\n    (0, _reactDom.render)(_react2.default.createElement(ReactConfirmAlert, properties), divTarget);\n  }\n}\n\nfunction removeElementReconfirm() {\n  var target = document.getElementById('react-confirm-alert');\n  (0, _reactDom.unmountComponentAtNode)(target);\n  target.parentNode.removeChild(target);\n}\n\nfunction addBodyClass() {\n  document.body.classList.add('react-confirm-alert-body-element');\n}\n\nfunction removeBodyClass() {\n  document.body.classList.remove('react-confirm-alert-body-element');\n}\n\nfunction confirmAlert(properties) {\n  addBodyClass();\n  createSVGBlurReconfirm();\n  createElementReconfirm(properties);\n}"],"sourceRoot":""}