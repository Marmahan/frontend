{"version":3,"sources":["webpack:///./src/newpost/root.component.js","webpack:///./src/newpost/newpost.app.js"],"names":["Newpost","state","title","body","postsubmitted","error","getCookie","name","parts","document","cookie","split","length","pop","shift","handlechange","e","_this$setState","_this","setState","target","id","value","handlesubmit","headers","Content-Type","Authorization","console","log","axios","post","then","response","data","Materialize","toast","render","this","react_default","a","createElement","className","onSubmit","type","onChange","htmlFor","onClick","React","Component","__webpack_require__","d","__webpack_exports__","bootstrap","mount","unmount","reactLifecycles","singleSpaReact","ReactDOM","rootComponent","domElementGetter","getElementById"],"mappings":"sVA+GeA,mQAlGbC,MAAM,CACJC,MAAM,GACNC,KAAK,GACLC,cAAc,GACdC,MAAM,MAGRC,UAAY,SAACC,GACX,IACIC,GADQ,KAAOC,SAASC,QACVC,MAAM,KAAOJ,EAAO,KACtC,GAAoB,GAAhBC,EAAMI,OAAa,OAAOJ,EAAMK,MAAMF,MAAM,KAAKG,WAGvDC,aAAc,SAACC,GAAI,IAAAC,EACjBC,EAAKC,WAALF,EAAA,IACGD,EAAEI,OAAOC,IAAIL,EAAEI,OAAOE,MADzBL,OAKFM,aAAc,SAACP,GACb,IAAIQ,EAAU,CACZC,eAAgB,mBAChBC,cAAiB,UAAaR,EAAKZ,UAAU,QAE/CqB,QAAQC,IAAIV,EAAKZ,UAAU,UAE3BuB,IAAMC,KAAK,oDAAsDZ,EAAKZ,UAAU,SAAS,CACvFJ,MAAMgB,EAAKjB,MAAMC,MACjBC,KAAKe,EAAKjB,MAAME,MACf,CAACqB,QAAYA,IAAUO,KAAK,SAACC,GACZ,GAAfA,EAASC,KACVf,EAAKC,SAAS,CACZf,cAAc,UAIhBc,EAAKC,SAAS,CACZd,MAAM2B,EAASC,OAGff,EAAKjB,MAAMI,QACT6B,YAAYC,MAAMjB,EAAKjB,MAAMI,MAAO,IAAO,eAC3Ca,EAAKC,SAAS,CACZd,MAAM,mWASlB+B,kBACE,OACEC,KAAKpC,MAAMG,cACPkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,SAKJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAb,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,cAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,QAAME,SAAUL,KAAKd,cACnBe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOpC,KAAK,QAAQc,GAAG,QAAQuB,SAAUP,KAAKtB,eAC1DuB,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,SAAf,UAGFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,YAAWjC,KAAK,OAAOc,GAAG,OAAOoB,UAAU,uBAAuBG,SAAUP,KAAKtB,eACjFuB,EAAAC,EAAAC,cAAA,SAAOK,QAAQ,QAAf,iBAGFP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,KACEH,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASG,QAAST,KAAKd,aAAaD,MAAM,OAAOmB,UAAU,iBAvFrEM,IAAMC,WCX5BC,EAAAC,EAAAC,EAAA,8BAAAC,IAAAH,EAAAC,EAAAC,EAAA,0BAAAE,IAAAJ,EAAAC,EAAAC,EAAA,4BAAAG,IAQA,IAAMC,EAAkBC,IAAe,CACrCT,UACAU,aACAC,cAAe1D,EACf2D,iBAgBF,WACE,OAAOlD,SAASmD,eAAe,cAdpBR,EAAY,CACvBG,EAAgBH,WAGLC,EAAQ,CACnBE,EAAgBF,OAGLC,EAAU,CACrBC,EAAgBD","file":"8.js","sourcesContent":["import React from \"react\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport axios from 'axios';  //to make the post request\r\n/* creates a new post */\r\nclass Newpost extends React.Component{\r\n\r\n  state={\r\n    title:'',\r\n    body:'',\r\n    postsubmitted:'',\r\n    error:''\r\n  }\r\n  //to get the jwt from the cookie must be passed as getCookie('jwt')\r\n  getCookie = (name)=> {\r\n    var value = \"; \" + document.cookie;\r\n    var parts = value.split(\"; \" + name + \"=\");\r\n    if (parts.length == 2) return parts.pop().split(\";\").shift();\r\n  }\r\n\r\n  handlechange =(e)=>{\r\n    this.setState({\r\n      [e.target.id]:e.target.value\r\n    })\r\n  }\r\n\r\n  handlesubmit =(e)=>{\r\n    var headers = {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" +  this.getCookie('jwt')\r\n  }\r\n    console.log(this.getCookie('email'));\r\n    //http://localhost:1115/newpost/\r\n    axios.post('http://minipc2.informatik.tu-chemnitz.de/newpost/' + this.getCookie('email'),{\r\n      title:this.state.title,\r\n      body:this.state.body\r\n    }, {\"headers\" : headers}).then((response)=>{\r\n      if(response.data==1){\r\n        this.setState({\r\n          postsubmitted:'true' //set the post as submitted\r\n        });\r\n      }\r\n      else{\r\n        this.setState({\r\n          error:response.data\r\n        });\r\n        {\r\n          this.state.error ? (  //show the response error\r\n            Materialize.toast(this.state.error, 3000 , 'red rounded'),\r\n            this.setState({     //clear the error\r\n              error:''\r\n            })\r\n          ) : null\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      this.state.postsubmitted ? (   //if message submitted, print a success message to the user\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"card-panel center\">\r\n                <h5 className=\"center green-text\">Post submitted!</h5>\r\n                <h6 className=\"center green-text\">:)</h6>\r\n              </div>\r\n            </div>\r\n          </div>\r\n      ) : (                             //otherwise keep showing the form\r\n            <div className='container'>\r\n            <div className=\"row\">\r\n              <div className=\"card-panel center\">\r\n                <i className=\"medium material-icons\">email</i>\r\n                <h5 className='center black-text'>New Post</h5> \r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"card-panel center\">\r\n                <form onSubmit={this.handlesubmit}>\r\n                  <div className=\"input-field\">\r\n                    <input type=\"text\" name=\"title\" id=\"title\" onChange={this.handlechange}/>\r\n                    <label htmlFor=\"title\">Title</label>\r\n                  </div>\r\n\r\n                  <div className=\"input-field\">\r\n                    <textarea  name=\"body\" id=\"body\" className=\"materialize-textarea\" onChange={this.handlechange}/>\r\n                    <label htmlFor=\"body\">Post Content</label>\r\n                  </div>\r\n\r\n                  <div className=\"left-align\">  {/* This div wrapper is necessary for the left alignment */}\r\n                    <input type=\"button\" onClick={this.handlesubmit}value=\"Send\" className=\"btn\"/>\r\n                  </div>\r\n                </form>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n      )\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default Newpost;","// home.app.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport singleSpaReact from 'single-spa-react';\r\nimport Newpost from './root.component.js';\r\n\r\n\r\n/* Several SPA functions are implemented */\r\nconst reactLifecycles = singleSpaReact({\r\n  React,\r\n  ReactDOM,\r\n  rootComponent: Newpost,\r\n  domElementGetter,\r\n})\r\n\r\nexport const bootstrap = [\r\n  reactLifecycles.bootstrap,\r\n];\r\n\r\nexport const mount = [\r\n  reactLifecycles.mount,\r\n];\r\n\r\nexport const unmount = [\r\n  reactLifecycles.unmount,\r\n];\r\n\r\n// the location where SPA mounts the application\r\nfunction domElementGetter() {\r\n  return document.getElementById(\"newpost\")\r\n}"],"sourceRoot":""}